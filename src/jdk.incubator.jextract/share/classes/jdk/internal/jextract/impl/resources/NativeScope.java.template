// Generated by jextract

import jdk.incubator.foreign.MemorySegment;
import jdk.incubator.foreign.ResourceScope;
import jdk.incubator.foreign.SegmentAllocator;

public class NativeScope implements SegmentAllocator, AutoCloseable {
    final ResourceScope resourceScope;
    final ResourceScope.Handle scopeHandle;
    final SegmentAllocator allocator;

    long allocatedBytes = 0;

    private NativeScope() {
        this.resourceScope = ResourceScope.ofConfined();
        this.scopeHandle = resourceScope.acquire();
        this.allocator = SegmentAllocator.arenaUnbounded(resourceScope);
    }

    private NativeScope(long size) {
        this.resourceScope = ResourceScope.ofConfined();
        this.scopeHandle = resourceScope.acquire();
        this.allocator = SegmentAllocator.arenaBounded(size, resourceScope);
    }

    @Override
    public MemorySegment allocate(long bytesSize, long bytesAlignment) {
        allocatedBytes += bytesSize;
        return allocator.allocate(bytesSize, bytesAlignment);
    }

    public ResourceScope scope() {
        return resourceScope;
    }

    public long allocatedBytes() {
        return allocatedBytes;
    }

    @Override
    public void close() {
        scopeHandle.close();
        resourceScope.close();
    }

    public static NativeScope unboundedScope() {
        return new NativeScope();
    }

    public static NativeScope boundedScope(long size) {
        return new NativeScope(size);
    }
}
